/* 
Intro Class - displays the menu for the game
Also loads the information for the boards from data files
June 13, 2022
David, Dieter, Kaif

 */
package isc4u.pkgfinal.project_kaif.david.dieter;

import static isc4u.pkgfinal.project_kaif.david.dieter.DrawBoard.allBoards;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author kaifm
 */
public class Intro extends javax.swing.JFrame {
    //menu theme
    File s = new File("src/isc4u/pkgfinal/project_kaif/david/dieter/Sounds/sega-playboicarti.wav");
    Sound menuSound = new Sound(s, true);
    //intro variable will be sent to the victory page
    private Intro intro = this;

    /**
     * Creates new form Intro
     */
    public Intro() {
        initComponents();
        
        background.setIcon(new ImageIcon("src/isc4u/pkgfinal/project_kaif/david/dieter/Tiles/introBack.png"));
        menuSound.play();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Ravie", 2, 48)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        title.setText(" Pogger");
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 100));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("WASD/Arrow keys to move.");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 230, 50));

        start.setFont(new java.awt.Font("Tw Cen MT Condensed", 1, 48)); // NOI18N
        start.setText("PLAY.");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });
        getContentPane().add(start, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 660, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 610, 780));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Get to the top.");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 130, 40));
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        //user presses the start button
        menuSound.stop();
        //sets the intro frame invisible
        this.setVisible(false);
        //loads the board array 
        createBoardArray();
        System.out.println("loaded array");
        //plays the game
        DrawBoard.playGame();
    }//GEN-LAST:event_startActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Intro().setVisible(true);
            }
        });

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton start;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * create board array method
     * loads the board array
     */
    private void createBoardArray() {
        for (int i = 0; i < allBoards.length; i++) {
            //loops through all 5 boards
            allBoards[i] = new Board(null, null, null);
            setTiles(i);
            setSound(i);
            setEnemies(i);
            setPlatforms(i);
        }
    }
    /**
     * setTiles method
     * reads from a data file to set the tile map of each board
     * @param level - level being read
     */
    public void setTiles(int level) {
        Image tile;
        int tileType;
        //change file name based on the level its reading
        String fileName = "src/isc4u/pkgfinal/project_kaif/david/dieter/Layout" + (level+1) + ".txt";
        System.out.println(fileName); //to check if the right file is being read

        try {
            //getting tiles for the board
            //uses local variable map to hold tiles
            Tile[][] map = new Tile[30][20];
            File f = new File(fileName);
            Scanner scan = new Scanner(f);
            for (int y = 0; y < 30; y++) {
                for (int x = 0; x < 20; x++) {
                    tileType = scan.nextInt();
                    //sets Image object to the tile image attribute
                    tile = new ImageIcon(this.getClass().getResource("/isc4u/pkgfinal/project_kaif/david/dieter/Tiles/" + tileType + ".png")).getImage();
                    if (tileType == 3) {//checks if the tile is water
                        map[y][x] = new Tile(false, x, y, tile);
                    } else {
                        map[y][x] = new Tile(true, x, y, tile);
                    }
                }
            }

            //making board object
            allBoards[level].setTileMap(map);
        } catch (FileNotFoundException ex) {
            System.out.println("couldn't do the thing");
        }

    }
    /**
     * setSound method
     * reads from a data file to set the sound of each board
     * @param level - level being read
     */
    public void setSound(int level) {
        try {
            //getting sounds for the board
            File f = new File("src/isc4u/pkgfinal/project_kaif/david/dieter/boardsounds.txt");
            Scanner soundScan = new Scanner(f);
            for (int i = 0; i < level; i++) {
                //will skip lines so that the next line is the right song for the level
                soundScan.nextLine();
            }
            //will now set the file and create sound object
            File g = new File(soundScan.nextLine());
            Sound s = new Sound(g, true);
            //sets the soundtrack of the board object
            System.out.println(s);
            allBoards[level].setSoundtrack(s);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    /**
     * setEnemies method
     * reads from a data file to add enemies from a data file to a board's entity list
     * @param level - level being read
     */
    private void setEnemies(int level) {
        try {
            //reads from file
            Scanner scanner = new Scanner("/isc4u/pkgfinal/project_kaif/david/dieter/Tiles/Enemies" + level+1 + ".txt");
            while (scanner.hasNextLine()) {
                //while loop continues until there are no more enemies left
                //gets filename of the imageicon
                String enemyName = scanner.nextLine();
                Image icon = new ImageIcon(this.getClass().getResource("/isc4u/pkgfinal/project_kaif/david/dieter/Tiles/" + enemyName + ".png")).getImage();
                //gets the rest of the enemy's attributes
                int x = Integer.parseInt(scanner.nextLine());
                int y = Integer.parseInt(scanner.nextLine());
                int xSpeed = Integer.parseInt(scanner.nextLine());
                int ySpeed = Integer.parseInt(scanner.nextLine());
                //creates a new enemy object
                Enemy enemy = new Enemy(icon, x, y, xSpeed, ySpeed);
                //adds it to the allboards array
                allBoards[level].addEntity(enemy);
            }

        } catch (Exception e) {
            System.out.println("Error!" + e);
        }
    }
    /**
     * setPlatforms method
     * reads from a data file to add platforms from a data file to a board's entity list
     * @param level - level being read
     */
    private void setPlatforms(int level) {
        try {
            //reads from file
            Scanner scanner = new Scanner("/isc4u/pkgfinal/project_kaif/david/dieter/Tiles/Platforms" + level + ".txt");

            while (scanner.hasNextLine()) {
                //while loop continues until there are no more platforms left
                String platformName = scanner.nextLine();
                Image icon = new ImageIcon(this.getClass().getResource("/isc4u/pkgfinal/project_kaif/david/dieter/Tiles/" + platformName + ".png")).getImage();
                //gets all the attributes of the platform from the data file
                int x = Integer.parseInt(scanner.nextLine());
                int y = Integer.parseInt(scanner.nextLine());
                int xSpeed = Integer.parseInt(scanner.nextLine());
                int ySpeed = Integer.parseInt(scanner.nextLine());
                //creates a new platform object
                Platform platform = new Platform(icon, x, y, xSpeed, ySpeed);
                //adds it to the board's array list
                allBoards[level].addEntity(platform);
            }
        } catch (Exception e) {
            System.out.println("Error!" + e);
        }
    }
}
